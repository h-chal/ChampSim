/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Thu Oct 31 23:55:07 GMT 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench.h"


/* String declarations */
static std::string const __str_literal_1("%d\n", 3u);


/* Constructor */
MOD_mkTestbench::MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_count(simHdl, "count", this, 5u, (tUInt8)0u, (tUInt8)0u),
    INST_random_r(simHdl, "random_r", this, 4u, (tUInt8)1u, (tUInt8)0u),
    INST_starting(simHdl, "starting", this, 1u, (tUInt8)1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 9u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_run", SYM_DEF, &DEF_CAN_FIRE_RL_run, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_start", SYM_DEF, &DEF_CAN_FIRE_RL_start, 1u);
  init_symbol(&symbols[2u], "count", SYM_MODULE, &INST_count);
  init_symbol(&symbols[3u], "RL_run", SYM_RULE);
  init_symbol(&symbols[4u], "RL_start", SYM_RULE);
  init_symbol(&symbols[5u], "random_r", SYM_MODULE, &INST_random_r);
  init_symbol(&symbols[6u], "starting", SYM_MODULE, &INST_starting);
  init_symbol(&symbols[7u], "WILL_FIRE_RL_run", SYM_DEF, &DEF_WILL_FIRE_RL_run, 1u);
  init_symbol(&symbols[8u], "WILL_FIRE_RL_start", SYM_DEF, &DEF_WILL_FIRE_RL_start, 1u);
}


/* Rule actions */

void MOD_mkTestbench::RL_start()
{
  INST_starting.METH_write((tUInt8)0u);
  INST_random_r.METH_write((tUInt8)2u);
}

void MOD_mkTestbench::RL_run()
{
  tUInt8 DEF_count_PLUS_1___d5;
  tUInt8 DEF_count_EQ_20___d4;
  tUInt8 DEF_x__h362;
  tUInt8 DEF_random_r_BIT_0___h387;
  tUInt8 DEF_random_r_BITS_3_TO_2___h356;
  tUInt8 DEF_random_r_BITS_3_TO_1___h403;
  tUInt8 DEF_random_r___d6;
  tUInt8 DEF_b__h200;
  DEF_b__h200 = INST_count.METH_read();
  DEF_random_r___d6 = INST_random_r.METH_read();
  DEF_random_r_BITS_3_TO_1___h403 = (tUInt8)(DEF_random_r___d6 >> 1u);
  DEF_random_r_BITS_3_TO_2___h356 = (tUInt8)(DEF_random_r___d6 >> 2u);
  DEF_random_r_BIT_0___h387 = (tUInt8)((tUInt8)1u & DEF_random_r___d6);
  DEF_x__h362 = DEF_random_r_BIT_0___h387 ? (tUInt8)15u & ((((tUInt8)1u << 3u) | (DEF_random_r_BITS_3_TO_2___h356 << 1u)) | ((tUInt8)1u & ~((tUInt8)((tUInt8)1u & (DEF_random_r___d6 >> 1u))))) : (tUInt8)15u & DEF_random_r_BITS_3_TO_1___h403;
  DEF_count_EQ_20___d4 = DEF_b__h200 == (tUInt8)20u;
  DEF_count_PLUS_1___d5 = (tUInt8)31u & (DEF_b__h200 + (tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_count_EQ_20___d4)
      dollar_finish(sim_hdl, "32", 0u);
  INST_count.METH_write(DEF_count_PLUS_1___d5);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,2", &__str_literal_1, DEF_random_r_BITS_3_TO_2___h356);
  INST_random_r.METH_write(DEF_x__h362);
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_starting.reset_RST(ARG_rst_in);
  INST_random_r.reset_RST(ARG_rst_in);
  INST_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_count.dump_state(indent + 2u);
  INST_random_r.dump_state(indent + 2u);
  INST_starting.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_run", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_start", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_run", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_start", 1u);
  num = INST_count.dump_VCD_defs(num);
  num = INST_random_r.dump_VCD_defs(num);
  num = INST_starting.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTestbench::vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_run) != DEF_CAN_FIRE_RL_run)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_run, 1u);
	backing.DEF_CAN_FIRE_RL_run = DEF_CAN_FIRE_RL_run;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_start) != DEF_CAN_FIRE_RL_start)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_start, 1u);
	backing.DEF_CAN_FIRE_RL_start = DEF_CAN_FIRE_RL_start;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_run) != DEF_WILL_FIRE_RL_run)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_run, 1u);
	backing.DEF_WILL_FIRE_RL_run = DEF_WILL_FIRE_RL_run;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_start) != DEF_WILL_FIRE_RL_start)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_start, 1u);
	backing.DEF_WILL_FIRE_RL_start = DEF_WILL_FIRE_RL_start;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_run, 1u);
      backing.DEF_CAN_FIRE_RL_run = DEF_CAN_FIRE_RL_run;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_start, 1u);
      backing.DEF_CAN_FIRE_RL_start = DEF_CAN_FIRE_RL_start;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_run, 1u);
      backing.DEF_WILL_FIRE_RL_run = DEF_WILL_FIRE_RL_run;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_start, 1u);
      backing.DEF_WILL_FIRE_RL_start = DEF_WILL_FIRE_RL_start;
    }
}

void MOD_mkTestbench::vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  INST_count.dump_VCD(dt, backing.INST_count);
  INST_random_r.dump_VCD(dt, backing.INST_random_r);
  INST_starting.dump_VCD(dt, backing.INST_starting);
}
